generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model Course {
    id               String       @id @default(uuid())
    title            String
    description      String       @db.Text
    largeDescription String?      @db.Text
    repoLink         String?
    image            String?
    createdAt        DateTime     @default(now())
    updatedAt        DateTime     @updatedAt
    enrollments      Enrollment[]
    lessons          Lesson[]
}

model Badge {
    id          String   @id @default(uuid())
    name        String
    image       String
    description String
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    users       User[]
}

model Lesson {
    id           String      @id @default(uuid())
    title        String
    videoUrl     String?
    content      String      @db.Text
    repoLink     String?
    courseId     String
    course       Course      @relation(fields: [courseId], references: [id])
    createdAt    DateTime    @default(now())
    updatedAt    DateTime    @updatedAt
    Enrollment   Enrollment? @relation(fields: [enrollmentId], references: [id])
    enrollmentId String?

    @@index([enrollmentId])
    @@index([courseId])
}

model Enrollment {
    id               String   @id @default(uuid())
    userId           String
    user             User     @relation(fields: [userId], references: [id])
    courseId         String
    course           Course   @relation(fields: [courseId], references: [id])
    completedLessons Lesson[]
    createdAt        DateTime @default(now())
    updatedAt        DateTime @updatedAt

    @@index([userId])
    @@index([courseId])
}

model Gamification {
    id        String   @id @default(uuid())
    userId    String   @unique
    user      User     @relation(fields: [userId], references: [id])
    points    Int      @default(0)
    level     Int      @default(0)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? @db.Text
    refresh_token_expires_in String? @db.Text
    access_token             String? @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String        @id @default(cuid())
    name          String?
    email         String?       @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    enrollments   Enrollment[]
    gamification  Gamification?
    badges        Badge[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
